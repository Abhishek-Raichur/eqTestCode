pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                // Ensure the workspace is populated from the configured SCM
                checkout scm
            }
        }
        stage('Create and activate a virtual environment'){
            steps {
                sh '''
                   python3 -m venv venv
                   . venv/bin/activate
                   venv/bin/pip install -r requirements.txt
                '''
            }
        }
        stage('Run Application') {
            steps {
                                // Try to run the Flask app using the venv if present, else python3, else docker
                sh '''
                    python3 -m venv venv
                   . venv/bin/activate
                    export FLASK_APP=${WORKSPACE}/app.py
                    python3 -m flask run --port 8080 &
                    echo $! > .app_pid
                    echo "Flask started with PID $(cat .app_pid)"
                '''
            }
        }
        stage('Test'){
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    python3 -m pytest -q
                '''
            }
            
        }
        stage('Build & Push Docker Image') {
            steps {
                dir(WORKSPACE) {
                    // Build image and push to Docker Hub. Requires DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD env vars
                    sh '''
                       set -e
                       docker build -t "$IMAGE" .
                    '''
                }
            }
        }
        /*stage('Build & Push Docker Image') {
            steps {
                // Build image and push to Docker Hub. Requires DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD env vars
                sh '''
                   set -e
                   REPO_BASE="${DOCKERHUB_REPO:-${DOCKERHUB_USERNAME:-yourdockeruser}}/eqtestcode"
                   TAG="${BUILD_NUMBER}"
                   IMAGE="${REPO_BASE}:${TAG}"
                   echo "Building image $IMAGE"
                   docker build -t "$IMAGE" .

                   if [ -n "$DOCKERHUB_USERNAME" -a -n "$DOCKERHUB_PASSWORD" ]; then
                     echo "Logging in to Docker Hub as $DOCKERHUB_USERNAME"
                     echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                   else
                     echo "ERROR: DOCKERHUB_USERNAME and DOCKERHUB_PASSWORD must be set as environment variables" >&2
                     exit 1
                   fi

                   echo "Pushing image $IMAGE"
                   docker push "$IMAGE"
                   echo "$IMAGE" > .pushed_image
                '''
            }
        }*
    
    }
}